module GestAcces {

	typedef string Empreinte;

	typedef string Photo;


	typedef short Heure;

	struct Jour {

	    short annee;
	    short mois;
	    short jour;

	};



	struct Zone {

	    short idZone;
	    string nomZone;
	    string tailleZone;
	    string typeZone;

	};

	typedef sequence<Zone> lzone;


	interface ServeurAnnuaire {

		exception CollaborateurInnexistant {};
		exception CollaborateurDejaExistant {};

		short enregisterCollaborateur(in string nom, in string prenom, in Photo p) raises(CollaborateurDejaExistant);

		short rechercherCollaborateur(in string nom, in string prenom);

		void supprimerCollaborateur(in short id) raises(CollaborateurInnexistant);

	};



	interface ServeurEmpreinte {

		exception EmpreinteInexistante {};

		exception EmpreintePresente{};

		short enregistrerEmpreinte(in Empreinte e, in short id) raises(EmpreintePresente);

		short modifierEmpreinte(in Empreinte ancienneEmpreinte, in Empreinte nouvelleEmpreinte) raises (EmpreinteInexistante);

		short supprimerEmpreinte(in short id);

		short verifierEmpreinte(in Photo id,in Empreinte mdp);
	};



	interface ServeurLog {

		oneway void envoyerLog(in string log);
		oneway void afficherLog();
		oneway void afficherLogd(in short date);
		oneway void afficherLogdf(in short dated, in short datef);

	};



	interface ServeurAcces {

		exception CollaborateurDejaExistant {};

		exception CollaborateurInexistant {};

		exception ZoneInexistante {};

		short ajoutPerm(in short id, in Heure heureDebut, in Heure heureFin, in Zone z) raises (ZoneInexistante);
		short ajoutTemp(in short id, in Jour jourDeb, in Jour jourFin,in Heure heureDebut, in Heure heureFin, in Zone z) raises (ZoneInexistante);
		short demanderAcces(in Photo id,in Empreinte mdp);
		short supprimerAcces (in short idCollaborateur, in short idZone) raises (CollaborateurInexistant);
		short verifierAcces (in short idCollaborateur,in short idZone);
		lzone getListeZone();



	};

};