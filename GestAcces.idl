module GestAcces {
	typedef string Empreinte;
	typedef string Photo;
	typedef short Heure;

	struct Jour {
	    short annee;
	    short mois;
	    short jour;
	};

    struct Date {
        Jour j;
        Heure h;
        short m;
    };


	struct Zone {
	    short idZone;
	    string nomZone;
	    string tailleZone;
	    string typeZone;
	};

	struct Log {
	    Date date;
	    string log;
	};


	interface ServeurAnnuaire {
		exception CollaborateurInnexistant {};
		exception CollaborateurDejaExistant {};

		void enregisterCollaborateur(in string nom, in string prenom, in Photo p) raises(CollaborateurDejaExistant);
		void rechercherCollaborateur(in string nom, in string prenom);
		void supprimerCollaborateur(in short id) raises(CollaborateurInnexistant);

	};



	interface ServeurEmpreinte {
		exception EmpreinteInexistante {};
		exception EmpreintePresente{};

		void enregistrerEmpreinte(in Empreinte e, in short id) raises(EmpreintePresente);
		void modifierEmpreinte(in Empreinte ancienneEmpreinte, in Empreinte nouvelleEmpreinte) raises (EmpreinteInexistante);
		void supprimerEmpreinte(in short id);
		void verifierEmpreinte(in Photo id,in Empreinte mdp);
	};


    typedef sequence<Log> lLog;

	interface ServeurLog {
		oneway void envoyerLog(in string log);
		oneway lLog afficherLogs();
		oneway Log afficherLogFromDate(in Date date);
		oneway Log afficherLogfromDateToDate(in Date dated, in Date datef);

	};

	typedef sequence<Zone> lZone;

	interface ServeurAcces {
		exception CollaborateurDejaExistant {};
		exception CollaborateurInexistant {};
		exception ZoneInexistante {};

		short ajoutPerm(in short id, in Heure heureDebut, in Heure heureFin, in Zone z) raises (ZoneInexistante);
		short ajoutTemp(in short id, in Jour jourDeb, in Jour jourFin,in Heure heureDebut, in Heure heureFin, in Zone z) raises (ZoneInexistante);
		short demanderAcces(in Photo id,in Empreinte mdp);
		void supprimerAcces (in short idCollaborateur, in short idZone) raises (CollaborateurInexistant);
		short verifierAcces (in short idCollaborateur,in short idZone);
		lZone getListeZone();

	};

};